name: Continuous Integration

on:
  push:
    branches: [main, development, staging]
  pull_request:
    branches: [main, development, staging]

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Check code formatting with Prettier
        run: npm run format:check
        continue-on-error: false

  # Job 2: Automated Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: books_exchange_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Initialize test database
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: books_exchange_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          NODE_ENV: test
        run: npm run db:init

      - name: Run unit tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: books_exchange_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          NODE_ENV: test
          LOG_LEVEL: error
        run: npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Job 3: Build Verification
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          CI: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: production-build
          path: dist/
          retention-days: 7
        continue-on-error: true
        if: hashFiles('dist/**') != ''

      - name: Verify application
        run: |
          echo "âœ… Application verified successfully"
          echo "ðŸ“¦ No build artifacts needed for Node.js server"

  # Job 4: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for vulnerabilities
        run: |
          echo "ðŸ”’ Running security checks..."
          npm audit --production

  # Job 5: Dependency Review (PRs only)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.repository_visibility == 'public'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review (best-effort)
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
        continue-on-error: true

  # Job 6: Smoke Tests
  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: books_exchange_smoke
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: smoke_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Initialize database
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: books_exchange_smoke
          DB_USER: postgres
          DB_PASSWORD: smoke_password
          NODE_ENV: test
        run: npm run db:init
      
      - name: Run smoke tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: books_exchange_smoke
          DB_USER: postgres
          DB_PASSWORD: smoke_password
          NODE_ENV: test
          PORT: 3000
          LOG_LEVEL: error
        run: npm run smoke
